{"version":3,"file":"static/js/562.c1bcb166.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/Cast/Cast.module.css?538b","Cast/Cast.js","webpack://goit-react-hw-05-movies/./src/MovieDetails/MovieDetails.module.css?d51b","MovieDetails/MovieDetails.js","webpack://goit-react-hw-05-movies/./src/Review/Review.module.css?8d90","Review/Review.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cast_container__K22qH\",\"list\":\"Cast_list__EOB7N\",\"cast_item\":\"Cast_cast_item__X69aV\",\"actor_image\":\"Cast_actor_image__XELUX\",\"actor_name\":\"Cast_actor_name__iKhiW\"};","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport styles from './Cast.module.css';\n\nconst API_KEY = '1fe8270af09b2a2e2b930e18d767076b';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n      )\n      .then(response => {\n        setCast(response.data.cast);\n      })\n      .catch(error => {\n        console.error('Error fetching cast:', error);\n      });\n  }, [movieId]);\n\n  return (\n    <div className={styles.container}>\n      <ul className={styles.list}>\n        {cast.map(actor => (\n          <li key={actor.id} className={styles.item}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n              alt={actor.name}\n              className={styles.actor_image}\n            />\n            <p className={styles.actor_name}>{actor.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"movie_details\":\"MovieDetails_movie_details__XPX9G\",\"movie_details_content\":\"MovieDetails_movie_details_content__iEs6W\",\"movie_details_image\":\"MovieDetails_movie_details_image__efNOl\",\"movie_title\":\"MovieDetails_movie_title__heELk\",\"movie_info\":\"MovieDetails_movie_info__MfxXl\",\"movie_rating\":\"MovieDetails_movie_rating__JXxyK\",\"movie_genre\":\"MovieDetails_movie_genre__MJbYl\",\"movie_overview\":\"MovieDetails_movie_overview__-ecdn\",\"additional_info\":\"MovieDetails_additional_info__zEqEU\",\"goBackLink\":\"MovieDetails_goBackLink__ahSrr\"};","import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams, Routes, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport styles from './MovieDetails.module.css';\nimport Cast from '../Cast/Cast';\nimport Review from '../Review/Review';\n\nconst API_KEY = '1fe8270af09b2a2e2b930e18d767076b';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [showCast, setShowCast] = useState(false);\n  const [showReview, setShowReview] = useState(false);\n  const cameBack = location.state?.from ?? '/';\n  const searchParams = new URLSearchParams(location.search);\n  const isCastOpen =\n    searchParams.get('cast') === 'true' ||\n    localStorage.getItem(`cast-${movieId}`) === 'true';\n  const isReviewOpen =\n    searchParams.get('review') === 'true' ||\n    localStorage.getItem(`review-${movieId}`) === 'true';\n\n  useEffect(() => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`)\n      .then(response => {\n        setMovieDetails(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching movie details:', error);\n      });\n  }, [movieId]);\n\n  useEffect(() => {\n    setShowCast(isCastOpen);\n    setShowReview(isReviewOpen);\n  }, [isCastOpen, isReviewOpen]);\n\n  const toggleCast = () => {\n    const newState = !showCast;\n    setShowCast(newState);\n    updateUrlState('cast', newState);\n    localStorage.setItem(`cast-${movieId}`, newState.toString());\n  };\n\n  const toggleReview = () => {\n    const newState = !showReview;\n    setShowReview(newState);\n    updateUrlState('review', newState);\n    localStorage.setItem(`review-${movieId}`, newState.toString());\n  };\n\n  const updateUrlState = (section, isOpen) => {\n    const search = new URLSearchParams(location.search);\n    search.set(section, isOpen ? 'true' : 'false');\n    const newPath = `${location.pathname}?${search.toString()}`;\n    window.history.replaceState(null, '', newPath);\n  };\n\n  return (\n    <div>\n      <div className={styles.movie_details}>\n        <Link to={cameBack} className={styles.goBackLink}>\n          Go back\n        </Link>\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`}\n          alt={movieDetails.title}\n          className={styles.movie_details_image}\n        />\n        <div className={styles.movie_details_content}>\n          <div className={styles.movie_title}>{movieDetails.title}</div>\n          <div className={styles.movie_info}>\n            <p className={styles.movie_rating}>\n              Rating: {movieDetails.vote_average}\n            </p>\n            <p className={styles.movie_genre}>\n              Genre:{' '}\n              {movieDetails.genres &&\n                movieDetails.genres.map(genre => genre.name).join(', ')}\n            </p>\n          </div>\n          <div className={styles.movie_overview}>{movieDetails.overview}</div>\n        </div>\n      </div>\n      <div className={styles.additional_info}>\n        <h2>Additional information</h2>\n        <div>\n          <Link\n            to={`/movies/${movieId}/cast`}\n            state={{ from: cameBack }}\n            onClick={toggleCast}\n          >\n            Cast\n          </Link>\n          {showCast && <Cast movieId={movieId} />}\n        </div>\n        <div>\n          <Link\n            to={`/movies/${movieId}/reviews`}\n            state={{ from: cameBack }}\n            onClick={toggleReview}\n          >\n            Reviews\n          </Link>\n          {showReview && <Review movieId={movieId} />}\n        </div>\n      </div>\n      <Routes>\n        <Route path=\"/movies/:movieId/*\" element={<Cast />} />\n        <Route path=\"/movies/:movieId/reviews/*\" element={<Review />} />\n      </Routes>\n    </div>\n  );\n}\n\nMovieDetails.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default MovieDetails;\n","// extracted by mini-css-extract-plugin\nexport default {\"review_container\":\"Review_review_container__2cQbN\",\"review_item\":\"Review_review_item__GUgWH\",\"author\":\"Review_author__GfOID\",\"content\":\"Review_content__o+CFW\"};","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport styles from './Review.module.css';\n\nconst API_KEY = '1fe8270af09b2a2e2b930e18d767076b';\n\nfunction Review() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n      )\n      .then(response => {\n        setReviews(response.data.results);\n      })\n      .catch(error => {\n        console.error('Error fetching reviews:', error);\n      });\n  }, [movieId]);\n\n  return (\n    <div className={styles.review_container}>\n      {reviews.length === 0 ? (\n        <p>Sorry,but we don't have any reviews for this movie.</p>\n      ) : (\n        <ul className={styles.review_list}>\n          {reviews.map(review => (\n            <li key={review.id} className={styles.review_item}>\n              <h3 className={styles.author}>{review.author}</h3>\n              <p className={styles.content}>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nReview.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape(\n      {\n        id: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n      }.isRequired\n    )\n  ),\n};\n\nexport default Review;\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","axios","then","response","data","catch","error","console","className","styles","map","actor","src","profile_path","alt","name","id","location","useLocation","movieDetails","setMovieDetails","showCast","setShowCast","showReview","setShowReview","cameBack","state","from","searchParams","URLSearchParams","search","isCastOpen","get","localStorage","getItem","isReviewOpen","updateUrlState","section","isOpen","set","newPath","pathname","toString","window","history","replaceState","to","poster_path","title","vote_average","genres","genre","join","overview","onClick","newState","setItem","Cast","Review","path","element","reviews","setReviews","results","length","review","author","content"],"sourceRoot":""}